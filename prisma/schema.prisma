// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @db.VarChar(255) @unique
  name String? @db.VarChar(100)
  password String
  createdAt DateTime @default(now()) @map("created_at")
  masterRoom Room[]
  roomInUser RoomUser[]
  messageInUser MessageUser[]
  friendByUser UserFriends[] @relation(name: "friend_by_user")
  userFriends UserFriends[] @relation(name: "user_friends")
  @@map("user")
}

model UserFriends {
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  friendId Int @map("friend_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "friend_by_user")
  friend User @relation(fields: [friendId], references: [id], onDelete: Cascade, name: "user_friends")
  @@unique([userId, friendId])
  @@index([userId])
  @@map("user_friends")
}

model Message {
  id String @db.VarChar(36) @id @default(uuid())
  name String @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  messageUser MessageUser[]
  @@map("message")
}

model MessageUser {
  id Int @id @default(autoincrement())
  messageId String @db.VarChar(36) @map("message_id") 
  userId Int @map("user_id")
  joinedAt DateTime @default(now()) @map("joined_at")
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([messageId, userId])
  @@map("message_user")
}



model Room {
  id String @db.VarChar(36) @id @default(uuid())
  name String @db.VarChar(100)
  masterId Int @map("master_id")
  createdAt DateTime @default(now()) @map("created_at")
  master User @relation(fields: [masterId], references: [id], onDelete: Cascade)
  roomUser RoomUser[]
  @@map("room")
}

model RoomUser {
  id Int @id @default(autoincrement())
  roomId String @db.VarChar(36) @map("room_id") 
  userId Int @map("user_id")
  joinedAt DateTime @default(now()) @map("joined_at")
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([roomId, userId])
  @@map("room_user")
}