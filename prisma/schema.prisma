// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusType {
  common
  custom
}

enum FilterType {
  block
  hidden
}

enum IconType {
  text
  image
}

enum ContentType {
  text
  calling
}

enum ChannelType {
  text
  voice
}

model User {
  id Int @id @default(autoincrement())
  email String @db.VarChar(255) @unique
  password String
  createdAt DateTime @default(now()) @map("created_at")
  profile Profile[]
  profileStatus ProfileStatus[]
  @@map("user")
}

model Profile {
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  statusType StatusType @map("status_type")
  statusId Int @map("status_id")
  tag String @unique @map("user_tag")
  name String? @db.VarChar(100) @map("user_name")
  information String @db.VarChar(255)
  image String @default("/image/profile/default.png")
  isCompany Boolean @default(false) @map("is_company")
  isOnline Boolean @default(false) @map("is_online")
  createdAt DateTime @default(now()) @map("created_at")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  friendByProfile Friend[] @relation(name: "friend_by_profile")
  friendProfile Friend[] @relation(name: "friend_profile")
  friendRequestByProfile FriendRequest[] @relation(name: "friend_request_by_profile")
  friendRequestProfile FriendRequest[] @relation(name: "friend_request_profile")
  filterByProfile ProfileFilter[] @relation(name: "filter_by_profile")
  filterProfile ProfileFilter[] @relation(name: "filter_profile")
  masterOfRoom Room[]
  joinedRoom RoomParticipant[]
  joinedDm DmParticipant[]
  sentRoomMessage RoomMessage[]
  sentDmMessage DmMessage[]
  joinCodeAuthor RoomJoinCode[]
  @@unique([userId, isCompany, name])
  @@index([userId])
  @@index([tag])
  @@map("profile")
}

model DeletedProfile {
  id Int @id
  userId Int @map("user_id")
  statusType StatusType @map("status_type")
  statusId Int @map("status_id")
  tag String @unique @map("user_tag")
  name String? @db.VarChar(100) @map("user_name")
  information String @db.VarChar(255)
  image String
  isCompany Boolean @map("is_company")
  isOnline Boolean @map("is_online")
  createdAt DateTime @map("created_at")
  @@unique([userId, isCompany, name])
  @@index([userId])
  @@map("deleted_profile")
}

model ProfileStatus {
  id Int @id @default(autoincrement())
  name String
  userId Int @map("user_id")
  isOnline Boolean @map("is_online")
  isAlarm Boolean @map("is_alarm")
  timeout Int @default(-1)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([name, userId])
  @@index([userId])
  @@map("user_profile_status")
}

model ProfileFilter {
  id Int @id @default(autoincrement())
  profileId Int @map("profile_id")
  filterProfileId Int @map("filter_profile_id")
  filterType FilterType @map("filter_type")
  byProfile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, name: "filter_by_profile")
  profile Profile @relation(fields: [filterProfileId], references: [id], onDelete: Cascade, name: "filter_profile")
  @@unique([profileId, filterProfileId, filterType])
  @@index([profileId])
  @@map("filter_user")
}

model Friend {
  id Int @id @default(autoincrement())
  profileId Int @map("profile_id")
  friendProfileId Int @map("friend_profile_id")
  isFavorite Boolean @map("is_favorite") @default(false)
  byProfile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, name: "friend_by_profile")
  friendProfile Profile @relation(fields: [friendProfileId], references: [id], onDelete: Cascade, name: "friend_profile")
  @@unique([profileId, friendProfileId])
  @@index([profileId])
  @@index([friendProfileId])
  @@map("friend")
}

model FriendRequest {
  id Int @id @default(autoincrement())
  profileId Int @map("user_profile_id")
  requestProfileId Int @map("friend_profile_id")
  sentAt DateTime @default(now()) @map("sent_at")
  byProfile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, name: "friend_request_by_profile")
  requestProfile Profile @relation(fields: [requestProfileId], references: [id], onDelete: Cascade, name: "friend_request_profile")
  @@unique([profileId, requestProfileId])
  @@index([profileId])
  @@index([requestProfileId])
  @@map("friend_request")
}

model DmSession {
  id String @db.VarChar(25) @id @default(cuid())
  name String @db.VarChar(100)
  iconType IconType @map("icon_type")
  iconData String @map("icon_data")
  createdAt DateTime @default(now()) @map("created_at")
  participant DmParticipant[]
  message DmMessage[]
  @@map("dm_session")
}

model DmParticipant {
  id Int @id @default(autoincrement())
  dmSessionId String @db.VarChar(25) @map("dm_session_id") 
  profileId Int @map("profile_id")
  joinedAt DateTime @default(now()) @map("joined_at")
  isNotAllowed Boolean @default(false) @map("is_not_allowed")
  dmSession DmSession @relation(fields: [dmSessionId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  @@unique([dmSessionId, profileId])
  @@index([dmSessionId])
  @@index([profileId])
  @@map("dm_participant")
}

model DmMessage {
  id Int @id @default(autoincrement())
  dmSessionId String @db.VarChar(25) @map("dm_session_id") 
  profileId Int @map("profile_id")
  contentType ContentType @default(text) @map("content_type")
  content String
  isPinned Boolean @default(false) @map("is_pinned")
  sentAt DateTime @default(now()) @map("sent_at")
  updatedAt DateTime? @map("updated_at")
  dmSession DmSession @relation(fields: [dmSessionId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id])
  @@index([dmSessionId, isPinned])
  @@index([dmSessionId])
  @@index([sentAt])
  @@map("dm_message")
}


model Room {
  id String @db.VarChar(25) @id @default(cuid())
  name String @db.VarChar(100)
  masterProfileId Int @map("master_profile_id")
  iconType IconType @map("icon_type")
  iconData String @map("icon_data")
  createdAt DateTime @default(now()) @map("created_at")
  masterProfile Profile @relation(fields: [masterProfileId], references: [id], onDelete: Cascade)
  participant RoomParticipant[]
  channel RoomChannel[]
  message RoomMessage[]
  joinCode RoomJoinCode[]
  @@index([name])
  @@map("room")
}

model RoomJoinCode {
  id Int @id @default(autoincrement())
  code String @db.VarChar(25) @unique @default(cuid())
  authorProfileId Int @map("author_profile_id")
  roomId String @db.VarChar(25) @map("room_id")
  expiresAt DateTime @map("expiresAt")
  authorProfile Profile @relation(fields: [authorProfileId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  @@index([code, roomId])
  @@index([roomId])
  @@index([expiresAt])
  @@map("room_join_code")
}

model RoomParticipant {
  id Int @id @default(autoincrement())
  roomId String @db.VarChar(25) @map("room_id") 
  profileId Int @map("user_profile_id")
  joinedAt DateTime @default(now()) @map("joined_at")
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  @@unique([roomId, profileId])
  @@index([profileId])
  @@map("room_participant")
}

model RoomChannel {
  id Int @id @default(autoincrement())
  roomId String @db.VarChar(25) @map("room_id") 
  name String @db.VarChar(100)
  type ChannelType @map("type")
  createdAt DateTime @default(now()) @map("created_at")
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  message RoomMessage[]
  @@index([roomId])
  @@index([name])
  @@map("room_channel")
}

model RoomMessage {
  id Int @id @default(autoincrement())
  roomId String @db.VarChar(25) @map("room_id") 
  roomChannelId Int @map("room_channel_id")
  profileId Int @map("profile_id")
  contentType ContentType @default(text) @map("content_type")
  content String
  isPinned Boolean @default(false) @map("is_pinned")
  sentAt DateTime @default(now()) @map("sent_at")
  updatedAt DateTime? @map("updated_at")
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomChannel RoomChannel @relation(fields: [roomChannelId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id])
  @@index([roomId, roomChannelId, isPinned])
  @@index([roomId, roomChannelId])
  @@index([roomId])
  @@index([sentAt])
  @@map("room_message")
}